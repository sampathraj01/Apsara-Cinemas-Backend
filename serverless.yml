org: sakthivelcloudb
service: backend
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  
  environment:
    USER_TABLE: ${self:custom.stageSettings.${self:provider.stage}.userTable}
    CATEGORY_TABLE: ${self:custom.stageSettings.${self:provider.stage}.categoryTable}
    PRODUCT_TABLE: ${self:custom.stageSettings.${self:provider.stage}.productTable}
    ORDER_TABLE: ${self:custom.stageSettings.${self:provider.stage}.orderTable}
    ORDERLIST_TABLE: ${self:custom.stageSettings.${self:provider.stage}.orderListTable}
    ERROR_LOG_TABLE: ${self:custom.stageSettings.${self:provider.stage}.errorLogTable}
    S3_BUCKET_NAME: ${self:custom.stageSettings.${self:provider.stage}.S3_BUCKET_NAME}
    JWT_SECRET: "apsarasecret122436"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.userTable}
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.categoryTable}
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.productTable}
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.comboTable}
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.orderTable}
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.orderListTable}
        - arn:aws:dynamodb:ap-south-1:*:table/${self:custom.stageSettings.${self:provider.stage}.errorLogTable}

    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::${self:custom.stageSettings.${self:provider.stage}.S3_BUCKET_NAME}/category/*
        - arn:aws:s3:::${self:custom.stageSettings.${self:provider.stage}.S3_BUCKET_NAME}/products/*


custom:
  userTable: ${self:custom.stageSettings.${self:provider.stage}.userTable}
  categoryTable: ${self:custom.stageSettings.${self:provider.stage}.categoryTable}
  productTable: ${self:custom.stageSettings.${self:provider.stage}.productTable}
  errorLogTable: ${self:custom.stageSettings.${self:provider.stage}.errorLogTable}
  comboTable: ${self:custom.stageSettings.${self:provider.stage}.comboTable} 
  orderTable: ${self:custom.stageSettings.${self:provider.stage}.orderTable}
  orderListTable: ${self:custom.stageSettings.${self:provider.stage}.orderListTable}
  stageSettings:
    dev:
      userTable: "user-dev"
      categoryTable: "category-dev"
      productTable: "product-dev"
      comboTable: "combo-dev"    
      orderTable: "order-dev"  
      orderListTable: "orderlist-dev" 
      errorLogTable: "errorlog-dev"
      S3_BUCKET_NAME: "apsara-asset-dev"
    prod:
      userTable: "user"
      categoryTable: "category"
      productTable: "product"
      comboTable: "combo"
      orderTable: "order"
      orderListTable: "orderlist"
      errorLogTable: "errorlog"
      S3_BUCKET_NAME: "apsara-asset"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CategoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.categoryTable}
        AttributeDefinitions:
          - AttributeName: categoryid
            AttributeType: S
        KeySchema:
          - AttributeName: categoryid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productTable}
        AttributeDefinitions:
          - AttributeName: productid
            AttributeType: S
        KeySchema:
          - AttributeName: productid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ErrorLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.errorLogTable}
        AttributeDefinitions:
          - AttributeName: errorlogid
            AttributeType: S
        KeySchema:
          - AttributeName: errorlogid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    ComboTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.comboTable}
        AttributeDefinitions:
          - AttributeName: comboid
            AttributeType: S
        KeySchema:
          - AttributeName: comboid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.orderTable}
        AttributeDefinitions:
          - AttributeName: orderid
            AttributeType: S
        KeySchema:
          - AttributeName: orderid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    orderListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.orderListTable}
        AttributeDefinitions:
          - AttributeName: orderlistid
            AttributeType: S
        KeySchema:
          - AttributeName: orderlistid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

functions:
  register:
    handler: login/register.registerHandler
    events:
      - http:
          path: register
          method: post
          cors: true

  login:
    handler: login/login.loginHandler
    events:
      - http:
          path: login
          method: post
          cors: true

  addCategory:
    handler: category/add.addcategory   
    events:
      - http:
          path: category/add             
          method: post
          cors: true

  getallcategory:
    handler: category/get.getallcategory
    events:
      - http:
          path: category/get
          method: get
          cors: true

  updatecategory:
    handler: category/update.updatecategory
    events:
      - http:
          path: category/{categoryid}
          method: put
          cors: true


  addproduct:
    handler: product/add.addproduct
    events:
      - http:
          path: product/add             
          method: post
          cors: true
  
  getallproduct:
    handler: product/get.getallproduct
    events:
      - http:
          path: product/get
          method: get
          cors: true
  
  updateproduct:
    handler: product/update.updateproduct
    events:
      - http:
          path: product/{productid}
          method: put
          cors: true
  
  updatestockstatus:
   handler: product/productstatus.updateStockStatus
   events:
    - http:
        path: product/updatestockstatus/{productid}
        method: put
        cors: true

  
  addcombo:
    handler: combo/add.addcombo
    events:
      - http:
          path: combo/add
          method: post
          cors: true

  addorder:
    handler : order/add.addorder
    events:
      - http:
          path: order/add
          method: post
          cors: true
  
  updateorderpaymentstatus:
    handler: order/updateorderpaymentstatus.updateorderpaymentstatus
    events:
      - http:
          path: order/updateorderpaymentstatus
          method: post
          cors: true

  getallorder:
    handler : order/getallorder.getallorders
    events:
      - http:
          path: order/getallorder
          method: post
          cors: true